name: Build Pong Game

on:
  push:
    branches: [ master, dev ]
    paths:
      - '**.cpp'
      - '**.h'
      - 'Makefile*'
      - '.github/workflows/build.yml'

  pull_request:
    branches: [ master, dev ]
    paths:
      - '**.cpp'
      - '**.h'
      - 'Makefile*'
      - '.github/workflows/build.yml'

  workflow_dispatch:

jobs:
  build-windows:
    runs-on: ubuntu-latest
    container: 
      image: fedora:41
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4

    - name: Install Dependencies
      run: |
        dnf -y update
        dnf -y install mingw64-gcc mingw64-gcc-c++ mingw64-SDL2 mingw64-SDL2_ttf make zip binutils

    - name: Build Windows Version
      run: |
        make windows

    - name: Create Windows ZIP Package
      run: |
        # Create a clean directory for the package
        mkdir -p pong-windows
        
        # Copy the executable
        ls -la build/windows
        cp build/windows/pong.exe pong-windows/
        
        # Copy ALL DLLs from the build directory - this is the critical part
        cp build/windows/*.dll pong-windows/
        
        # List the build/windows directory to see all available DLLs
        echo "Contents of build/windows directory:"
        ls -la build/windows/
        
        # Copy any resources if needed
        if [ -f "build/windows/settings.ini" ]; then
          cp build/windows/settings.ini pong-windows/
        fi
        
        # Create lib directory structure if it exists
        if [ -d "build/windows/lib" ]; then
          mkdir -p pong-windows/lib
          cp -r build/windows/lib/* pong-windows/lib/
        fi
        
        # Create share directory structure if it exists
        if [ -d "build/windows/share" ]; then
          mkdir -p pong-windows/share
          cp -r build/windows/share/* pong-windows/share/
        fi
        
        # Copy documentation
        if [ -f "README.md" ]; then
          cp README.md pong-windows/
        fi
        if [ -f "LICENSE.md" ]; then
          cp LICENSE.md pong-windows/
        fi
        
        # Create README-WINDOWS.txt with installation instructions
        cat > pong-windows/README-WINDOWS.txt << 'EOL'
        Pong Game for Windows
        Version 1.0

        Installation:
        1. Extract all files to a directory of your choice.
        2. Run pong.exe to start the game.
        3. IMPORTANT: Keep all DLL files in the same directory as pong.exe!

        Controls:
        - Player 1: W (up) and S (down)
        - Player 2: Up and Down arrow keys
        - Difficulty: 1 (Easy), 2 (Medium), 3 (Hard)
        - Joystick support is also available

        Requirements:
        - Windows 7 or later
        - 64-bit Windows
        EOL
        
        # Debug information - list all files in the package
        echo "Files included in the package:"
        ls -la pong-windows/
        
        # Create the ZIP file
        zip -r Pong-Windows.zip pong-windows

    - name: Upload Windows Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-artifacts
        path: |
          Pong-Windows.zip
          build/windows/pong.exe

  create-release:
    needs: [build-windows]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: github.event_name == 'push'
    
    steps:
    - name: Download Windows Artifacts
      uses: actions/download-artifact@v4
      with:
        name: windows-artifacts
        path: windows-artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          windows-artifacts/Pong-Windows.zip
          windows-artifacts/pong.exe
        tag_name: ${{ github.ref == 'refs/heads/master' && format('v{0}', github.run_number) || format('dev-v{0}', github.run_number) }}
        name: ${{ github.ref == 'refs/heads/master' && format('Release {0}', github.run_number) || format('Dev Build {0}', github.run_number) }}
        draft: false
        prerelease: ${{ github.ref != 'refs/heads/master' }}
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          ${{ github.ref == 'refs/heads/master' && 'Release build' || 'Development build' }}
          Commit: ${{ github.sha }}
          Build number: ${{ github.run_number }}
          
          This release includes:
          - Windows version (pong.exe)
          - Windows portable version with all dependencies (Pong-Windows.zip)

    - name: Output Release URL
      if: success()
      run: |
        echo "::notice::Release available at: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref == 'refs/heads/master' && format('v{0}', github.run_number) || format('dev-v{0}', github.run_number) }}"
